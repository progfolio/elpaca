#+title: Elpaca: An Elisp Package Manager
#+author: Nicholas Vollmer
#+options: exports:both

#+html: <p align="center"><img src="./images/elpaca.svg" /></p>

#+html: <p align="center"> "Chews data, spits packages."</p>

Elpaca is an elisp package manager.
It allows users to find, install, update, and remove third-party packages for Emacs.
It is a replacement for the built-in Emacs package manager, package.el.

* Installation
If you're impatient, take a look at the [[#example-configuration][example configuration]]
** Requirements
- Emacs >= 27.1
- git (minimum version TBD)
- Windows users must be able to create symlinks.
** Bootstrap Snippet
To install Elpaca, add the following bootstrapping snippet to your init.el.
It must come before any calls to other Elpaca functions/macros.
This will clone Elpaca into your =user-emacs-directory= under the =elpaca= subdirectory.
It then builds and activates Elpaca.

#+begin_src emacs-lisp :lexical t
(declare-function elpaca-generate-autoloads "elpaca")
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(when-let ((elpaca-repo (expand-file-name "repos/elpaca/" elpaca-directory))
           (elpaca-build (expand-file-name "builds/elpaca/" elpaca-directory))
           (elpaca-target (if (file-exists-p elpaca-build) elpaca-build elpaca-repo))
           (elpaca-url  "https://www.github.com/progfolio/elpaca.git")
           ((add-to-list 'load-path elpaca-target))
           ((not (file-exists-p elpaca-repo)))
           (buffer (get-buffer-create "*elpaca-bootstrap*")))
  (condition-case-unless-debug err
      (progn
        (unless (zerop (call-process "git" nil buffer t "clone" elpaca-url elpaca-repo))
          (error "%s" (list (with-current-buffer buffer (buffer-string)))))
        (byte-recompile-directory elpaca-repo 0 'force)
        (require 'elpaca)
        (elpaca-generate-autoloads "elpaca" elpaca-repo)
        (kill-buffer buffer))
    ((error)
     (delete-directory elpaca-directory 'recursive)
     (with-current-buffer buffer
       (goto-char (point-max))
       (insert (format "\n%S" err))
       (display-buffer buffer)))))
(require 'elpaca-autoloads)
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca (elpaca :host github :repo "progfolio/elpaca"))
#+end_src

You'll also want to disable package.el in your [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][early-init file]], and remove anything related to package.el in your init file.
e.g. calls to ~(package-activate-all)~.


#+begin_src emacs-lisp :lexical t
(setq package-enable-at-startup nil)
#+end_src

* Basic concepts

The =elpaca-example= macro in the following examples reduces verbosity.
It is not part of Elpaca.

#+begin_src emacs-lisp :lexical t :exports none :results silent
(defun elpaca-example-sort-plist (plist)
  "Return copy of PLIST with :package followed by lexically sorted kew/val pairs."
  `(:package ,(plist-get plist :package)
             ,@(cl-loop for k in (cl-sort (cl-loop for key in plist by #'cddr
                                                   unless (eq key :package) collect key)
                                          #'string< :key #'symbol-name)
                        append (list k (plist-get plist k)))))

(defmacro elpaca-example (&rest body)
  "Execute BODY with a clean elpaca environment."
  `(let (elpaca-cache-menu-items
         elpaca-order-functions
         elpaca-recipe-functions
         (elpaca-menu-functions '(elpaca-example-menu)))
     (elpaca-example-sort-plist ,@body)))
#+end_src

Examples will use the following [[#menus][recipe menu]], which offers a "burger" package recipe:

#+begin_src emacs-lisp :lexical t :results silent
(defun elpaca-example-menu (_)
  '((burger . (:recipe (:buns 2 :lettuce t :tomato t :beef t :cheese t :cook well-done :from elpaca-example-menu)))))
#+end_src

** Recipes
:PROPERTIES:
:CUSTOM_ID: recipes
:END:
A recipe provides Elpaca with the metadata necessary to build and install a package.
It is a list of the form:

#+begin_src emacs-lisp :lexical t
(ITEM . PROPS)
#+end_src

/ITEM/ is a symbol uniquely identifying the package.
/PROPS/ is a plist with any of the following recipe keywords:

- :host | :fetcher :: A symbol or string representing the hosting service of the repository.

  #+begin_src emacs-lisp :lexical t
(example :host github)
(example :fetcher gitlab)
(example :host "www.example.com")
  #+end_src

- :repo :: A string of the form =USER/REPO=.

#+begin_src emacs-lisp :lexical t
(example :host github :repo "user/example")
#+end_src

- :branch :: The repository branch to check out when installing the package.

#+begin_src emacs-lisp :lexical t
(example :host github :repo "user/example" :branch "main")
#+end_src

- :tag :: The tag to check out when installing the package.

#+begin_src emacs-lisp :lexical t
(example :host github :repo "user/example" :tag "v1.0")
#+end_src

- :ref :: The [[https://git-scm.com/book/en/v2/Git-Internals-Git-References][git ref]] to check out when installing the package.

  #+begin_src emacs-lisp :lexical t
(example :host github :repo "user/example" :ref "a76ca0a") ;; Check out a specific commit.
  #+end_src

- :depth :: The package repository's history depth.

  #+begin_src emacs-lisp :lexical t
(example :depth 1) ;; Shallow clone with history truncated to 1 commit.
(example :depth nil) ;; Full repository clone.
  #+end_src

- :remotes :: A list of repository [[https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes][remotes]].
The first element is the default remote when installing the package.
If it is a string, it names the default remote.
The remaining elements are lists of the form:

#+begin_src emacs-lisp :lexical t
(NAME . PROPS)
#+end_src

/NAME/ is a string used to name the remote.
/PROPS/ are recipe keyword/value pairs used to override values previously declared in the recipe.

#+begin_src emacs-lisp :lexical t
(example :remotes ("origin"))
#+end_src

#+begin_src emacs-lisp :lexical t
(example :host github :repo "original/example"
         :remotes ("origin"
                   ("fork" :host gitlab :repo "user/example-fork.el")))
#+end_src

- :main :: The name of the main elisp file.
  When provided this can speed up the process of cloning and loading a package's dependencies.

  #+begin_src emacs-lisp :lexical t
(example :main "example.el")
  #+end_src

- :build :: A list of build steps, nil or t.
  If the list starts with the symbol =:not=. The set difference of =elpaca-default-build-steps= and the remaining elements of the list are used.

  #+begin_src emacs-lisp :lexical t
(example :build (:not autoloads))
  #+end_src

- :inherit :: When non-nil, inherit /PROPS/ from =elpaca-order-functions= and possibly =elpaca-menu-functions=.
  For example, without inheritance:
#+name: recipe-inheritance-nil
#+begin_src emacs-lisp :lexical t :results raw code :exports both
(elpaca-example (elpaca-recipe '(burger :inherit nil)))
#+end_src

returns the recipe as declared:

#+results: recipe-inheritance-nil
#+begin_src emacs-lisp
(:package "burger" :inherit nil)
#+end_src

With inheritance enabled:
#+name: recipe-inheritance-menu
#+begin_src emacs-lisp :lexical t :results raw code :exports both
(elpaca-example (elpaca-recipe '(burger :inherit t)))
#+end_src

the elpaca-example-menu provides the rest of the "burger" recipe.

#+results: recipe-inheritance-menu
#+begin_src emacs-lisp
(:package "burger" :beef t :buns 2 :cheese t :cook well-done :from elpaca-example-menu :inherit t :lettuce t :tomato t)
#+end_src

*** Inheritance precedence
:PROPERTIES:
:CUSTOM_ID: inheritance-precedence
:END:
The following list shows the order of precedence for inheritance.
Each item takes precedence over the items which follow it.

- elpaca-recipe-functions
- declared recipe
- elpaca-order-functions
- elpaca-menu-functions

#+name: recipe-inheritance-precedence
#+begin_src emacs-lisp :lexical t :results raw code :exports both
(elpaca-example
 (let ((elpaca-recipe-functions (lambda (recipe) '(:from recipe-functions :cheese extra)))
       (elpaca-order-functions (lambda (order) '(:from order-functions :tomato nil))))
   (elpaca-recipe '(burger))))
#+end_src

#+results: recipe-inheritance-precedence
#+begin_src emacs-lisp
(:package "burger" :beef t :buns 2 :cheese extra :cook well-done :from recipe-functions :lettuce t :tomato nil)
#+end_src

*** elpaca-recipe-functions
:PROPERTIES:
:CUSTOM_ID: elpaca-recipe-functions
:END:
The abnormal hook =elpaca-recipe-functions= runs via =run-hook-with-args-until-success= just before installing the package.
Each function in the list should accept the current recipe as its sole argument and return either nil or a plist.
The first function to return a plist has its return value merged with the current recipe.

This is useful if you want to guarantee the values of certain keywords despite allowing recipe inheritance.

#+name: recipe-functions-example
#+begin_src emacs-lisp :lexical t :exports both :results raw code
(elpaca-example
 (let ((elpaca-recipe-functions
        '((lambda (recipe)
            "If a recipe calls for cheese, I always want extra."
            (when (plist-get recipe :cheese) (list :cheese 'extra))))))
   (elpaca-recipe '(burger))))
#+end_src

#+results: recipe-functions-example
#+begin_src emacs-lisp
(:package "burger" :beef t :buns 2 :cheese extra :cook well-done :from elpaca-example-menu :lettuce t :tomato t)
#+end_src

** Menus
:PROPERTIES:
:CUSTOM_ID: menus
:END:
A menu is a function which returns an alist of the form:
#+begin_src emacs-lisp :lexical t
((ITEM . DATA)...)
#+end_src

/ITEM/ is a symbol uniquely identifying a package.
/DATA/ is a plist of package metadata.
/DATA/ must contain the following keywords:

- :recipe :: A package [[#recipes][recipe.]]
- :source :: A string naming the menu.

It may also provide additional information about a package.
For example, the Elpaca UI utilizes the following keywords when present:

- :url :: The package's website URL.
- :description :: A description of the package.
- :date :: The time of package's last update.

The function must accept one of the following /REQUEST/ symbols as an argument:

- index :: Return the alist described above
- update :: update the menu's alist.

#+begin_src emacs-lisp :lexical t
(defun elpaca-menu-minimal (request_)
  "A minimal menu example.
Ignore REQUEST, as this is a static, curated list of packages."
  '((example :source "EXAMPLE" :recipe (example :host github :repo "user/example"))
    (two :source "EXAMPLE" :recipe (two :host gitlab :repo "user/two"))))
#+end_src

Menus allow one to offer Elpaca users curated lists of package recipes.
For example, [[https://www.github.com/progfolio/melpulls][melpulls]] implements an Elpaca menu for pending MELPA packages.

*** elpaca-menu-functions
The =elpaca-menu-functions= variable contains menu functions for the following package sources by default:

- [[https://www.github.com/melpa/melpa][MELPA]]
- [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/][Org]]
- [[https://git.sr.ht/~bzg/org-contrib][Org-contrib]]
- [[https://www.github.com/emacs-straight/gnu-elpa-mirror][GNU ELPA Mirror]]
- [[https://elpa.nongnu.org][NonGNU ELPA]]

Menus are checked in order until one returns the requested menu item or the menu list is exhausted.

** Orders
:PROPERTIES:
:CUSTOM_ID: orders
:END:

At a minimum, an order is a symbol which represents the name of a [[#menus][menu]] item:

#+begin_src emacs-lisp :lexical t
(elpaca 'example)
#+end_src

An order may also be a partial or full recipe:

#+begin_src emacs-lisp :lexical t
(elpaca '(example :host gitlab))
(elpaca '(example :host gitlab :repo "user/example" :inherit nil))
#+end_src

*** elpaca-order-functions
The abnormal hook =elpaca-order-functions= runs via =run-hook-with-args-until-success= before =elpaca-menu-functions=.
Each function in the list should accept the current order as its sole argument and return either nil or a plist.
The first function to return a plist has its return value merged with the current order.

This is useful for declaring default order properties.
For example, the following function disables recipe inheritance by default:

#+begin_src emacs-lisp :lexical t :results raw code :exports both
(elpaca-example
 (let ((elpaca-order-functions '((lambda (_) '(:inherit nil)))))
   (elpaca-recipe 'burger)))
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
(:package "burger" :inherit nil)
#+end_src

** Queues
:PROPERTIES:
:CUSTOM_ID: queues
:END:
Elpaca installs packages asynchronously.
[[#orders][Orders]] are automatically queued in a list.
A queue is considered "processed" when all of its orders have either finished or failed.

Queues make it possible to ensure a package is installed, activated, and configured prior to other packages.
The =elpaca-queue= macro wraps calls to =elpaca=, ensuring those orders are processed in their own queue.
This is especially useful when one wants to install a package to use later on in their init file.
For example, a package which implements an Elpaca [[#menus][menu]]:

#+begin_src emacs-lisp :lexical t
(elpaca-queue (elpaca '(melpulls :host github :repo "progfolio/melpulls"))
              (add-to-list 'elpaca-menu-functions #'melpulls)
              (elpaca-update-menus #'melpulls))
;; Implicitly queued into a new queue.
(elpaca 'menu-item-available-in-melpulls)
#+end_src

* Installing Packages

- elpaca :: =(order &rest body)=
Installs /ORDER/ and executes /BODY/ after processing ORDER's [[#queues][queue]].

/ORDER/ is an [[#orders][order]] as described above.

This macro is for programmatic use in one's init file.
Any of the following will install the "example" package:

#+begin_src emacs-lisp :lexical t
(elpaca example) ;; recipe looked up in `elpaca-menu-functions'.
#+end_src

#+begin_src emacs-lisp :lexical t
(elpaca example (message "Messaged after the order's queue has processed."))
#+end_src

#+begin_src emacs-lisp :lexical t
(elpaca (example :host github :repo "user/example"))
#+end_src

#+begin_src emacs-lisp :lexical t
(elpaca `(example :host github :repo "user/example"
                  ,@(when (eq system-type 'darwin) ;; backqouting supported
                      (list :pre-build ((message "Mac specific pre-build"))))))
#+end_src

If /ORDER/ is nil, /BODY/ is still executed after processing the current [[#queues][queue]].

#+begin_src emacs-lisp :lexical t
(elpaca 'first (message "First configured"))
;; If this weren't wrapped in an `elpaca' call, it would be executed FIRST
;; Due to the "first" and "third" package installing asynchronously.
(elpaca nil (message "Second"))
(elpaca 'third (message "Third configured"))
#+end_src

- elpaca-use-package :: =(order &rest body)=

  A wrapper for the [[https://github.com/jwiegley/use-package][use-package]] macro.
  /ORDER/ is the same as above.
  /BODY/ must conform to use-package's /ARGS/.

  #+begin_src emacs-lisp :lexical t
(elpaca use-package (require 'use-package)) ; install use-package
(elpaca-use-package (example :host github :repo "user/example")
  :config (message "Example configured"))
  #+end_src

* Finding, Updating, Removing Packages
The =elpaca-manger= command will pop to the Elpaca manager buffer.
From this buffer you can search and act on all the packages Elpaca knows about.

The following commands are available in the Elpaca manager buffer:

#+begin_src emacs-lisp :lexical t :exports results table replace
(with-temp-buffer
  (describe-map-tree elpaca-ui-mode-map)
  (goto-char (point-min))
  (let (rows)
    (while (re-search-forward "elpaca" nil 'noerror)
      (push (split-string (buffer-substring-no-properties
                           (line-beginning-position) (line-end-position))
                          "\t+")
            rows))
    (setq rows (mapcar (lambda (it)
                         (append
                          (list (car (split-string
                                      (documentation (intern (cadr it)))
                                      "\n")))
                          it))
                       rows))
    (setq rows (cl-sort (mapcar #'nreverse rows) #'string< :key #'cadr))
    (push 'hline rows)
    (push (list "Command" "Default Binding" "Description") rows)
    rows))
#+end_src

#+RESULTS:
| Command                    | Default Binding | Description                                                     |
|----------------------------+-----------------+-----------------------------------------------------------------|
| elpaca-ui-send-input       | !               | Send input string to current process.                           |
| elpaca-ui-search-installed | I               | Search for "#unique #installed"                                 |
| elpaca-ui-search-marked    | M               | Search for "#unique #marked"                                    |
| elpaca-ui-search-orphaned  | O               | Search for "#unique #orphan"                                    |
| elpaca-ui-search-refresh   | R               | Rerun the current search for BUFFER.                            |
| elpaca-ui-search-tried     | T               | Search for "#unique #installed !#declared"                      |
| elpaca-ui-unmark           | U               | Unmark current package.                                         |
| elpaca-ui-browse-package   | b               | Browse current package’s URL via ‘browse-url’.                  |
| elpaca-ui-mark-delete      | d               | Mark package for delete action.                                 |
| elpaca-ui-mark-install     | i               | Mark package for install action.                                |
| elpaca-log                 | l               | Display ‘elpaca-log-buffer’.                                    |
| elpaca-manager             | m               | Display elpaca’s package management UI.                         |
| elpaca-ui-mark-rebuild     | r               | Mark package for rebuild action.                                |
| elpaca-ui-search           | s               | Filter current buffer by QUERY. If QUERY is nil, prompt for it. |
| elpaca-status              | t               | Log most recent events for packages.                            |
| elpaca-ui-mark-update      | u               | Mark package for update action.                                 |
| elpaca-ui-visit-build      | v b             | Visit builds dir associated with current package.               |
| elpaca-ui-visit-repo       | v r             | Visit repo associated with current package.                     |
| elpaca-ui-execute-marks    | x               | Execute each action in ‘elpaca-ui-marked-packages’.             |

* Example configuration
:PROPERTIES:
:CUSTOM_ID: example-configuration
:END:

The following is an example init.el using Elpaca:

#+begin_src emacs-lisp :lexical t :tangle ./test/example-init.el :results silent
;;; init-elpaca.el --- ELPACA INIT DEMO   -*- lexical-binding: t; -*-
;; Bootstrap Elpaca
(declare-function elpaca-generate-autoloads "elpaca")
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(when-let ((elpaca-repo (expand-file-name "repos/elpaca/" elpaca-directory))
           (elpaca-build (expand-file-name "builds/elpaca/" elpaca-directory))
           (elpaca-target (if (file-exists-p elpaca-build) elpaca-build elpaca-repo))
           (elpaca-url  "https://www.github.com/progfolio/elpaca.git")
           ((add-to-list 'load-path elpaca-target))
           ((not (file-exists-p elpaca-repo)))
           (buffer (get-buffer-create "*elpaca-bootstrap*")))
  (condition-case-unless-debug err
      (progn
        (unless (zerop (call-process "git" nil buffer t "clone" elpaca-url elpaca-repo))
          (error "%s" (list (with-current-buffer buffer (buffer-string)))))
        (byte-recompile-directory elpaca-repo 0 'force)
        (require 'elpaca)
        (elpaca-generate-autoloads "elpaca" elpaca-repo)
        (kill-buffer buffer))
    ((error)
     (delete-directory elpaca-directory 'recursive)
     (with-current-buffer buffer
       (goto-char (point-max))
       (insert (format "\n%S" err))
       (display-buffer buffer)))))
(require 'elpaca-autoloads)
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca (elpaca :host github :repo "progfolio/elpaca"))

;; Install use-package
(elpaca use-package (require 'use-package))
;; Install evil and configure via `use-package'
(elpaca-use-package evil :demand t)
;; Install a package from a user-provided recipe
(elpaca (yodel :host github :repo "progfolio/yodel"))
#+end_src
#  LocalWords:  elpaca Elpaca elisp repo minibuffer website init ui UI unmark Unmark plist alist MELPA programmatic

* Issues/Bugs

Before reporting any issues/bugs. Please have a look at [[file:ISSUES_TEMPLATE.org][ISSUES_TEMPLATE.org]]

* Contributing

Contributions are welcome. It does not matter who you are you can still contribute to the project in your way :).

** Not a developer but still want to contribute

Here is [[https://youtu.be/FccdqCucVSI][video]] by Mr. Nick on how to contribute and credit to him as well

** Developer

If you are developer, have a look at the [[file:CONTRIBUTING.org][CONTRIBUTING.org]] document for more information.

* License

The project is available under the [[file:LICENSE][GPLv3]] license.
