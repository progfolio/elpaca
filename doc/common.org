#+title: Common documentation
#+author: Nicholas Vollmer

* Preamble                                                         :noexport:
This document contains documentation included in the README file as well as the Info manual.
In order to export after saving changes, evaluate the following source blocks:

#+begin_src emacs-lisp :lexical t :results silent
(require 'ox-gfm)
(defun +elpaca-export-readme ()
  (with-current-buffer (find-file-noselect "./readme.org")
    (org-export-to-file 'gfm "../README.md")))
(add-hook 'after-save-hook #'+elpaca-export-readme nil t)

(require 'ox-texinfo)
(defun +elpaca-export-manual ()
  (with-current-buffer (find-file-noselect "./manual.org")
    (org-export-to-file 'texinfo "./elpaca.texi")))
(add-hook 'after-save-hook #'+elpaca-export-manual nil t)

(defun +elpaca-export-md ()
  (with-current-buffer (find-file-noselect "./manual.org")
    (org-export-to-file 'gfm "./manual.md")))
(add-hook 'after-save-hook #'+elpaca-export-md nil t)

(add-hook 'after-save-hook #'org-babel-tangle nil t)
#+end_src

* Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:
Elpaca is an elisp package manager.
It allows users to find, install, update, and remove third-party packages for Emacs.
It is a replacement for the built-in Emacs package manager, package.el.
* Installation
:PROPERTIES:
:DESCRIPTION: Installing Elpaca.
:CUSTOM_ID: installation
:END:
** Requirements
:PROPERTIES:
:DESCRIPTION: The required software environment for Elpaca.
:CUSTOM_ID: installation-requirements
:END:
Elpaca requires:
- Emacs >= 27.1
- git (minimum version TBD)
** Installer
:PROPERTIES:
:CUSTOM_ID: installer
:DESCRIPTION: A script responsible for installing Elpaca.
:END:
To install Elpaca, add the following elisp to your init.el.
It must come before any calls to other Elpaca functions/macros.
This will clone Elpaca into your =user-emacs-directory= under the =elpaca= subdirectory.
It then builds and activates Elpaca.

#+name: installation-script
#+begin_src emacs-lisp :lexical t :eval never-export
(defvar elpaca-installer-version 0.9)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

#+begin_src emacs-lisp :lexical t :eval never-export :tangle "./init.el" :exports none :noweb tangle
;; Example Elpaca configuration -*- lexical-binding: t; -*-
<<installation-script>>
#+end_src

#+begin_src emacs-lisp :lexical t :eval never-export :tangle "./installer.el" :exports none :noweb tangle
;; Elpaca Installer -*- lexical-binding: t; -*-
;; Copy below this line into your init.el
<<installation-script>>
#+end_src

- Windows users must be able to create symlinks[fn:1], or enable =elpaca-no-symlink-mode=

#+begin_src emacs-lisp :lexical t :eval never-export :tangle "./init.el"
;; Uncomment for systems which cannot create symlinks:
;; (elpaca-no-symlink-mode)
#+end_src

You'll also want to disable package.el in your early-init file[fn:2]:

#+begin_src emacs-lisp :lexical t :tangle "./early-init.el" :eval never-export :exports none
;; Example Elpaca early-init.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp :lexical t :tangle "./early-init.el" :eval never-export
(setq package-enable-at-startup nil)
#+end_src

#+begin_src emacs-lisp :lexical t :tangle "./early-init.el" :eval never-export :exports none
;; Local Variables:
;; no-byte-compile: t
;; no-native-compile: t
;; no-update-autoloads: t
;; End:
#+end_src

And remove anything related to package.el in your init file. e.g. calls to ~(package-activate-all)~.

* Quick Start
:PROPERTIES:
:CUSTOM_ID: quick-start
:END:

| Operation                             | UI (keys apply in elpaca-ui-mode) | completing-read interface commands |
|---------------------------------------+-----------------------------------+------------------------------------|
| Finding Packages                      | ~g~ ~m~ (or ~M-x~ ~elpaca-manager~)       | ~elpaca-info~                        |
| Trying Packages (for current session) | ~i~ ~x~                               | ~elpaca-try~                         |
| Fetching Package Updates              | ~f~ ~x~                               | ~elpaca-fetch~ or ~elpaca-fetch-all~   |
| Merging Updates                       | ~m~ ~x~                               | ~elpaca-merge~ or ~elpaca-merge-all~   |
| Updating Packages^*                   | ~p~ ~x~                               | ~elpaca-update~ or ~elpaca-update-all~ |
| Rebuilding Packages                   | ~r~ ~x~                               | ~elpaca-rebuild~                     |
| Deleting Packages                     | ~d~ ~x~                               | ~elpaca-delete~                      |
| View Package Logs                     | ~g~ ~l~                               | ~elpaca-log~                         |
| Visit Package Repository Directory    | ~v~                                 | ~elpaca-visit~                       |
| Visit Package Build Directory         | ~C-u~ ~v~                             | ~C-u M-x~ ~elpaca-visit~               |
| Browse Package Website                | ~b~                                 | ~elpaca-browse~                      |
|---------------------------------------+-----------------------------------+------------------------------------|
â€‹* Update is an alias for "pull". It's encouraged to fetch, review, and *then* merge package updates rather than pulling.


Packages installed via the above commands are not loaded on subsequent Emacs sessions (after restarting).
To install and load packages persistently (across Emacs restarts), use the =elpaca= macro in your init file after the installer. ([[#installer][installer]])

For example:

#+begin_src emacs-lisp :lexical t :eval never-export :tangle "./init.el" :exports code
;; Install a package via the elpaca macro
;; See the "recipes" section of the manual for more details.

;; (elpaca example-package)

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode))

;;When installing a package used in the init file itself,
;;e.g. a package which adds a use-package key word,
;;use the :wait recipe keyword to block until that package is installed/configured.
;;For example:
;;(use-package general :ensure (:wait t) :demand t)

;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil :ensure t :demand t)

;;Turns off elpaca-use-package-mode current declaration
;;Note this will cause evaluate the declaration immediately. It is not deferred.
;;Useful for configuring built-in emacs features.
(use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
#+end_src

#+begin_src emacs-lisp :lexical t :tangle "./init.el" :eval never-export :exports none
;; Local Variables:
;; no-byte-compile: t
;; no-native-compile: t
;; no-update-autoloads: t
;; End:
#+end_src

*IMPORTANT*:

Elpaca installs and activates packages asynchronously.
Elpaca processes its package queues /after/ Emacs reads the init file.[fn:3]
Consider the following example:

#+begin_src emacs-lisp :lexical t :eval never-export
(elpaca package-a (message "First")) ; Queue First
(message "Second") ; Second messaged
(elpaca package-b (message "Third")) ; Queue Third
(elpaca-process-queues) ; Process queue: First messaged, Third messaged.
#+end_src

"Second" will be message /before/ "First" and "Third".
If a form should be evaluated after a package is installed/activated, put it in that package declaration's /BODY/.
Declaration /BODY/ forms are evaluated synchronously in declared order.
e.g.

#+begin_src emacs-lisp :lexical t :eval never-export
(elpaca package-a (message "First") (message "Second"))  ; Queue First, Second
(elpaca package-b (message "Third"))  ; Queue Third
(elpaca-process-queues) ; Process queue: First, Second, then Third messaged.
#+end_src

Add configuration which relies on =after-init-hook=, =emacs-startup-hook=, etc to =elpaca-after-init-hook= so it runs after Elpaca has activated all queued packages.
This includes loading of saved customizations. e.g.

#+begin_src emacs-lisp :lexical t
(setq custom-file (expand-file-name "customs.el" user-emacs-directory))
(add-hook 'elpaca-after-init-hook (lambda () (load custom-file 'noerror)))
#+end_src

* Footnotes

[fn:1] [[https://www.howtogeek.com/16226/complete-guide-to-symbolic-links-symlinks-on-windows-or-linux/][windows symlink guide]]

[fn:2] [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][early-init file]]

[fn:3] This is so Elpaca can build a proper dependency tree. It ensures packages the user explicitly requests are not preempted by dependencies of other packages.
